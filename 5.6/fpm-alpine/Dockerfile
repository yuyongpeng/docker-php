#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM alpine:3.4

ENV PHP_PATH /usr/local/php

# persistent / runtime deps
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pcre-dev \
		openssl \
		pkgconf \
		re2c
# 添加中国的源
RUN echo "https://mirrors.ustc.edu.cn/alpine/v3.6/main" > /etc/apk/repositories
RUN echo "https://mirrors.ustc.edu.cn/alpine/v3.6/community" >> /etc/apk/repositories
RUN apk update
RUN apk add --no-cache bash

RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz \
# https://github.com/docker-library/php/issues/494
		openssl

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www-data \
	&& adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/php/etc
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3

ENV PHP_VERSION 5.6.31
ENV PHP_URL="https://secure.php.net/get/php-5.6.31.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-5.6.31.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="c464af61240a9b7729fabe0314cdbdd5a000a4f0c9bd201f89f8628732fe4ae4" PHP_MD5=""

# 下载源码并验证
RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps \
		gnupg \
	; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
#	if [ -n "$PHP_ASC_URL" ]; then \
#		wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
#		export GNUPGHOME="$(mktemp -d)"; \
#		for key in $GPG_KEYS; do \
#			gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
#		done; \
#		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
#		rm -rf "$GNUPGHOME"; \
#	fi; \
	\
	apk del .fetch-deps

# copy bash程序
COPY docker-php-source /usr/local/bin/

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		coreutils \
		curl-dev \
		libedit-dev \
		openssl-dev \
		libxml2-dev \
		sqlite-dev \
		autoconf \
		m4 \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	# 解压php源码
	&& docker-php-source extract \
	&& cd /usr/src/php \
	# x86_64-linux-musl 获得的内容
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--prefix="${PHP_PATH}" \
		#--with-config-file-path="$PHP_INI_DIR" \
		#--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		\
# bundled pcre is too old for s390x (which isn't exactly a good sign)
# /usr/src/php/ext/pcre/pcrelib/pcre_jit_compile.c:65:2: error: #error Unsupported architecture
		--with-pcre-regex=/usr \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& make install \
	&& cd /usr/src/php \
	&& cp ./php.ini-production ${PHP_PATH}/lib/php.ini \
	&& cp ./sapi/fpm/php-fpm.conf.in ${PHP_PATH}/etc/php-fpm.conf \
	&& cp ./sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm \
	&& chmod 755 /etc/init.d/php-fpm \
	# 使用 strip 对二进制文件进行瘦身
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& cd / \
	&& docker-php-source delete \
	\
	# scanelf 用于获得so文件所依赖的包，然后在解析字符串后，安装这些包
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps \
	\
# https://github.com/docker-library/php/issues/443
	&& /usr/local/php/bin/pecl update-channels \
	&& rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# 扩展的安装
ENV SRC_DIR /usr/src
RUN	mkdir -p ${SRC_DIR} \
	cd ${SRC_DIR} \
# OpenCC
RUN apk add --no-cache --virtual .phpmodules-deps cmake g++ doxygen python2 \
	&& wget -P ${SRC_DIR} -O opencc-1.0.4.tar.gz https://github.com/BYVoid/OpenCC/archive/ver.1.0.4.tar.gz \
	&& tar zxvf opencc-1.0.4.tar.gz \
	&& cd OpenCC-ver.1.0.4 \
	&& make && make install \
	&& git clone https://github.com/NauxLiu/opencc4php.git \
	&& cd opencc4php \
	&& ${PHP_PATH}/bin/phpize \
	&& ./configure --with-php-config=${PHP_PATH}/bin/php-config  \
	&& make && make install
# memcached
RUN apk add --no-cache --virtual .phpmodules-dep memcached memcached-dev \
	&& ${PHP_PATH}/pecl install memcache \
# mongod
RUN apk add --no-cache --virtual .phpmodules-dep mongodb mongodb-tools \
	&& wget -P ${SRC_DIR}  http://pecl.php.net/get/mongo-1.6.11.tgz \
	&& tar zxvf mongo-1.6.11.tgz \
	&& cd mongo-1.6.11 \
	&& ${PHP_PATH}/bin/phpize \
	&& ./configure --with-php-config=${PHP_PATH}/bin/php-config \
	&& make && make install
# amqp
RUN apk add --no-cache --virtual .phpmodules-dep rabbitmq-c-dev rabbitmq-c rabbitmq-c-utils \
	&& ${PHP_PATH}/bin/pecl install amqp
# yaf
RUN wget -P ${SRC_DIR} http://pecl.php.net/get/yaf-2.3.5.tgz \
	&& cd yaf-2.3.5 \
	&& ${PHP_PATH}/bin/phpize \
	&& ./configure --with-php-config=${PHP_PATH}/bin/php-config \
	&& make && make install 

# scanelf 用于获得so文件所依赖的包，然后在解析字符串后，安装这些包
RUN	runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive ${PHP_PATH}/lib/php/extensions/no-debug-non-zts-20131226/ \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	&& apk del .build-deps \
	# 使用 strip 对二进制文件进行瘦身
RUN	{ find ${PHP_PATH} -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \



ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = [::]:9000'; \
	} | tee php-fpm.d/zz-docker.conf

EXPOSE 9000
CMD ["php-fpm"]
##</autogenerated>##
